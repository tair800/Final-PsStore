@section Links {
    <link href="~/css/detail.css" rel="stylesheet" />
}

@model GameDetailWithCommentsVM



<!-- Game Banner -->
<div class="game-banner d-flex align-items-end">
    <div class="container">
        <div class="game-info text-white p-4 mb-4">
            <h1 class="fw-bold">@Model.GameDetail.Title</h1>
            <div class="d-flex align-items-center mb-3">
                <span class="badge bg-secondary me-2">@Model.GameDetail.Platform</span>
                <span class="me-2">4.35</span>
                <span class="me-2 rating-star">⭐</span>
                <span>67K ratings</span>
            </div>
            <p class="game-price">$@Model.GameDetail.Price</p>
            <div class="d-flex align-items-center">
                <button class="btn btn-warning text-dark cart-btn">Add to Cart</button>
                <button class="btn btn-link text-white ms-3">
                    <i class="fa fa-heart text-3xl"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add-Ons Section -->
<div class="container py-5">
    <h2 class="text-center mb-5">Add-Ons</h2>
    <div class="d-flex justify-content-center">
        @foreach (var dlc in Model.GameDetail.DlcNames)
        {
            <div class="addon-item text-center me-4">
                <img class="addon-img rounded" src="@dlc.ImgUrl" alt="@dlc.Name" />
                <p class="fs-5 fw-bold mt-2">@dlc.Name</p>
                <h3 class="fs-5 mt-1">$@dlc.Price</h3>
            </div>
        }
    </div>
</div>

<!-- Comments Section -->
<div class="container mt-5">
    <div class="comment-section p-4">
        <h3 class="mb-4">Comments</h3>
        @if (Model.Contents != null && Model.Contents.Any())
        {
            <div class="comments-list">
                @foreach (var comment in Model.Contents)
                {
                    <div class="comment-item p-4 mb-4 rounded" id="comment-@comment.UserId">
                        <div class="comment-header d-flex justify-content-between align-items-center mb-2">
                            <span class="comment-user">@comment.UserId</span>
                            <span class="text-github fs-6 ps-3">@comment.CreateDate.ToString("MMM dd, yyyy")</span>
                        </div>
                        <div class="comment-content mb-3" id="content-@comment.Id">
                            <p>@comment.Content</p>
                          @*   @if (comment.Modified)
                            {
                                <small class="text-github">Modified</small>
                            } *@
                        </div>
                        @if (comment.CanDelete) 
                        {
                            <div class="comment-actions d-flex">
                                <button class="delete-comment-btn btn btn-danger me-2" onclick="deleteComment(@comment.Id)"><i class="fa-solid fa-trash"></i></button>
                                <button class="edit-comment-btn btn btn-primary" onclick="editComment(@comment.Id)"><i class="fa-solid fa-pen"></i></button>
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <p>No comments available for this game. Be the first to comment!</p>
        }
    </div>
</div>

<!-- Add a New Comment Section -->
@if (ViewBag.IsAuthenticated)
{
    <div class="container add-comment-form mt-5 p-4 rounded">
        <h4 class="mb-4">Add a Comment</h4>
        <form id="addCommentForm">
            <input type="hidden" id="gameId" value="@Model.GameDetail.Id" />
            <div class="form-group mb-3">
                <textarea id="commentContent" class="add-comment-textarea form-control" placeholder="Write your comment here..." required></textarea>
            </div>
            <button type="button" onclick="addComment()" class="add-comment-btn btn btn-success">Add Comment</button>
        </form>
    </div>
}
else
{
    <div class="container add-comment-form mt-4 text-center">
        <p>Please <a href="@Url.Action("Login", "User")">log in</a> to add a comment.</p>
    </div>
}


<script>
    function addComment() {
        const gameId = $("#gameId").val();
        const content = $("#commentContent").val();

        if (!content.trim()) {
            Swal.fire('Error', 'Comment content cannot be empty.', 'error');
            return;
        }

        $.ajax({
            url: '@Url.Action("AddComment", "Game")',
            type: 'POST',
            data: {
                ContentNew: {
                    Content: content,
                    GameId: gameId
                }
            },
            success: function (response) {
                if (response.success) {
                    $(".comments-list").append(`
                            <div class="comment-item p-3 mb-4" id="comment-${response.comment.id}">
                                <div class="comment-header d-flex justify-content-between align-items-center">
                                    <span class="comment-user">${response.comment.userId}</span>
                                    <span class="text-google">${new Date(response.comment.createdDate).toLocaleDateString()}</span>
                                </div>
                                <div class="comment-content mt-2" id="content-${response.comment.id}">
                                    <p>${response.comment.content}</p>
                                </div>
                                <button class="delete-comment-btn btn btn-danger mt-2" onclick="deleteComment(${response.comment.id})"><i class="fa-solid fa-trash"></i> Delete</button>
                                <button class="edit-comment-btn btn btn-primary mt-2" onclick="editComment(${response.comment.id})"><i class="fa-solid fa-pen"></i> Edit</button>
                            </div>
                        `);

                    // Re-render the FontAwesome icons
                    if (typeof FontAwesome !== 'undefined') {
                        FontAwesome.dom.i2svg(); // This ensures newly added icons are displayed correctly
                    }

                    // Clear the textarea after successful submission
                    $("#addCommentForm").trigger("reset");
                } else {
                    Swal.fire('Error', response.message, 'error');
                }
            },
            error: function () {
                Swal.fire('Error', 'An error occurred while trying to add the comment.', 'error');
            }
        });
    }

    function editComment(commentId) {
        const currentContent = $(`#content-${commentId} p`).text();

        Swal.fire({
            title: 'Edit your comment',
            input: 'textarea',
            inputValue: currentContent,
            showCancelButton: true,
            confirmButtonText: 'Save',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
                if (!value) {
                    return 'Comment content cannot be empty!';
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const newContent = result.value;

                $.ajax({
                    url: '@Url.Action("EditComment", "Game")',
                    type: 'POST',
                    data: {
                        commentId: commentId,
                        content: newContent
                    },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire('Updated!', response.message, 'success');
                            $(`#content-${commentId} p`).text(newContent);

                            // Check if the "Modified" text already exists, and add it only if it doesn't
                            const modifiedDate = new Date().toLocaleString();
                            if ($(`#content-${commentId} .modified-text`).length === 0) {
                                $(`#content-${commentId}`).append(`<small class="modified-text text-github">Modified on ${modifiedDate}</small>`);
                            } else {
                                // Update the existing modified date
                                $(`#content-${commentId} .modified-text`).text(`Modified on ${modifiedDate}`);
                            }

                            // Re-render the FontAwesome icons
                            if (typeof FontAwesome !== 'undefined') {
                                FontAwesome.dom.i2svg();
                            }
                        } else {
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function () {
                        Swal.fire('Error', 'An error occurred while trying to edit the comment.', 'error');
                    }
                });
            }
        });
    }

    function deleteComment(commentId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("DeleteComment", "Game")',
                    type: 'POST',
                    data: { commentId: commentId },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire('Deleted!', response.message, 'success');

                            // Smoothly remove the comment from the DOM
                            $(`#comment-${commentId}`).fadeOut(400, function () {
                                $(this).remove();
                            });
                        } else {
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function () {
                        Swal.fire('Error', 'An error occurred while trying to delete the comment.', 'error');
                    }
                });
            }
        });
    }

</script>



