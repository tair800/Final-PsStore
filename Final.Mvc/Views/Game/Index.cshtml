@using Final.Mvc.ViewModels.GameVMs
@model List<GameListItemVM>

@section Links {
    <link href="~/css/game.css" rel="stylesheet" />
}

<div class="page-container">
    <h1 class="mb-4">All Games</h1>
    <div class="row">
        <!-- Filtering Options on the Left -->
        <div class="col-12 col-md-3 mb-4">
            <div class="filter-container">
                <form method="get" asp-action="Index">
                    <!-- Category Filter -->
                    <div class="mb-3">
                        <label for="filterCategory" class="form-label">Category</label>
                        <select id="filterCategory" name="category" class="form-select">
                            <option value="">All Categories</option>

                            @foreach (var cat in ViewBag.Categories)
                            {
                                <option value="@cat.CategoryId">@cat.CategoryName</option>
                            }
                        </select>
                    </div>

                    <!-- Platform Filter -->
                    <div class="mb-3">
                        <label for="filterPlatform" class="form-label">Platform</label>
                        <select id="filterPlatform" name="platform" class="form-select">
                            <option value="">All Platforms</option>
                            <option value="0">PS4</option>
                            <option value="1">PS5</option>
                            <option value="2">PS4 & PS5</option>
                           
                        </select>
                    </div>

                    <!-- Price Filter -->
                    <div class="mb-3">
                        <label for="sortByPrice" class="form-label">Sort By Price</label>
                        <select id="sortByPrice" name="sortByPrice" class="form-select">
                            <option value="">No Price Sorting</option>
                            <option value="price_asc">Price (Low to High)</option>
                            <option value="price_desc">Price (High to Low)</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="sortByDate" class="form-label">Sort By Release Date</label>
                        <select id="sortByDate" name="sortByDate" class="form-select">
                            <option value="">No Date Sorting</option>
                            <option value="date_asc">Release Date (Oldest to Newest)</option>
                            <option value="date_desc">Release Date (Newest to Oldest)</option>
                        </select>
                    </div>


                    <button type="submit" class="btn btn-primary">Apply Filters</button>
                        <button type="button" class="btn btn-secondary" id="resetFilters">Reset Filters</button>
                </form>
            </div>
        </div>

        <!-- Games Display on the Right -->
        <div class="col-12 col-md-9">
            <div class="row">
                @if (Model != null && Model.Any())
                {
                    @foreach (var game in Model)
                    {
                        <div class="col-12 col-sm-6 col-lg-4 game-card-container mb-4">
                            <div class="game-card">
                                <img src="@game.ImgUrl" alt="@game.Title" class="game-image" />
                                <button class="favorite-btn">
                                    <i class="fas fa-heart"></i>
                                </button>

                                <!-- Platform Labels -->
                                <div class="platform-labels">
                                    @if ((int)game.Platform == 1)
                                    {
                                        <div class="platform-label bg-white text-dark">PS5</div>
                                    }
                                    else if (game.Platform == 0)
                                    {
                                        <div class="platform-label bg-dark text-light">PS4</div>
                                    }
                                    else if ((int)game.Platform == 2)
                                    {
                                        <div class="platform-label bg-white text-dark">PS5</div>
                                        <div class="platform-label bg-dark text-light">PS4</div>
                                    }
                                </div>

                                <!-- Game Info -->
                                <div class="game-info">
                                    <div class="game-title">@game.Title</div>

                                    <!-- Display discounted price if applicable -->
                                    <div class="game-price">
                                        @if (game.SalePrice.HasValue)
                                        {
                                            <span class="original-price text-decoration-line-through">$@game.Price</span>
                                            <span class="discount-price">$@game.SalePrice</span>
                                        }
                                        else
                                        {
                                            <span class="regular-price">$@game.Price</span>
                                        }
                                    </div>
                                </div>

                                <!-- Add to Basket Button -->
                                <button class="add-to-cart-btn" onclick="addToBasket('@game.Id')">Add to Cart</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No games found based on the selected filters.</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Function to extract JWT token from cookies
        function getJwtTokenFromCookie() {
            const cookieString = document.cookie;
            const cookies = cookieString.split('; ');
            const tokenCookie = cookies.find(row => row.startsWith('token='));
            return tokenCookie ? tokenCookie.split('=')[1] : null;
        }

        // Function to decode JWT token and extract the payload
        function decodeJwtToken(token) {
            if (!token) return null;
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            return JSON.parse(jsonPayload);
        }

        // Function to add a game to the basket
        function addToBasket(gameId) {
            const token = getJwtTokenFromCookie(); // Get the token from cookies
            const decodedToken = decodeJwtToken(token); // Decode the JWT token
            const email = decodedToken ? decodedToken.email : null; // Extract the email from the token

            if (!email) {
                alert("Please sign in to add items to the basket.");
                return;
            }

            $.ajax({
                url: '@Url.Action("AddToBasket", "Basket")', // Use your MVC Basket controller
                type: 'POST',
                data: {
                    email: email,  // Send the decoded email
                    gameId: gameId,
                    quantity: 1  // Default quantity is 1
                },
                success: function (result) {
                    alert('Game added to basket!');
                },
                error: function (xhr, status, error) {
                    alert('Failed to add game to basket.');
                }
            });
        }




                // Function to get URL parameters
                function getUrlParameter(name) {
                    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                    const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
                    const results = regex.exec(location.search);
                    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
                }

                // Set filter values based on URL parameters
                function setFilterValues() {
                    const category = getUrlParameter('category');
                    const platform = getUrlParameter('platform');
                    const sortByPrice = getUrlParameter('sortByPrice');
                    const sortByDate = getUrlParameter('sortByDate');

                    if (category) {
                        document.getElementById('filterCategory').value = category;
                    }
                    if (platform) {
                        document.getElementById('filterPlatform').value = platform;
                    }
                    if (sortByPrice) {
                        document.getElementById('sortByPrice').value = sortByPrice;
                    }
                    if (sortByDate) {
                        document.getElementById('sortByDate').value = sortByDate;
                    }
                }

                // Reset Filters by clearing URL parameters and reloading the page
                document.getElementById('resetFilters').addEventListener('click', function () {
                    window.location.href = '@Url.Action("Index", "Game")';
                });

                // Call setFilterValues when the page loads
                window.onload = function () {
                    setFilterValues();
                };
    </script>
}
