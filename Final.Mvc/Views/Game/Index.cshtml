@using Final.Mvc.ViewModels.GameVMs
@model List<GameListItemVM>

@section Links {
    <link href="~/css/game.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
}


<div class="page-container">
    <h1 class="mb-4">All Games</h1>
    <div class="row">
        <!-- Filtering Options on the Left -->
        <div class="col-12 col-md-3 mb-4">
            <div class="filter-container">
                <form method="get" asp-action="Index">
                    <!-- Category Filter -->
                    <select id="filterCategory" name="category" class="form-select">
                        <option value="">All Categories</option>
                        @foreach (var cat in ViewBag.Categories)
                        {
                            if (ViewBag.SelectedCategory == cat.Id)  // Select the chosen category
                            {
                                <option value="@cat.Id" selected>@cat.Name</option>
                            }
                            else
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        }
                    </select>



                    <!-- Platform Filter -->
                    <div class="mb-3">
                        <label for="filterPlatform" class="form-label">Platform</label>
                        <select id="filterPlatform" name="platform" class="form-select">
                            <option value="">All Platforms</option>
                            <option value="0">PS4</option>
                            <option value="1">PS5</option>
                            <option value="2">PS4 & PS5</option>

                        </select>
                    </div>

                    <!-- Price Filter -->
                    <div class="mb-3">
                        <label for="sortByPrice" class="form-label">Sort By Price</label>
                        <select id="sortByPrice" name="sortByPrice" class="form-select">
                            <option value="">No Price Sorting</option>
                            <option value="price_asc">Price (Low to High)</option>
                            <option value="price_desc">Price (High to Low)</option>
                            <option value="discount">Discounted Only</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="sortByDate" class="form-label">Sort By Release Date</label>
                        <select id="sortByDate" name="sortByDate" class="form-select">
                            <option value="">No Date Sorting</option>
                            <option value="date_asc">Release Date (Oldest to Newest)</option>
                            <option value="date_desc">Release Date (Newest to Oldest)</option>
                        </select>
                    </div>

                    <button type="submit" class="btn btn-primary">Apply Filters</button>
                    <button type="button" class="btn btn-secondary" id="resetFilters">Reset Filters</button>
                </form>
            </div>
        </div>

        <!-- Games Display on the Right -->
        <div class="col-12 col-md-9">
            <div class="game-list-container">

                <div class="row">
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var game in Model)
                        {
                            <div class="col-12 col-sm-6 col-lg-4 game-card-container mb-4">
                                <div class="game-card">
                                    <!-- Wrap the entire game card with a link to the details page -->
                                    <a href="@Url.Action("Detail", "Game", new { id = game.Id })" class="game-details-link" style="text-decoration:none; color:inherit;">
                                        <img src="@game.ImgUrl" alt="@game.Title" class="game-image" />

                                        <!-- Wishlist Button -->
                                        <a class="favorite-btn" data-game-id="@game.Id" data-in-wishlist="@game.IsInWishlist.ToString().ToLower()">
                                            <i class="fas fa-heart @(game.IsInWishlist ? "wishlist-added" : "")"></i>
                                        </a>

                                        <!-- Platform Labels -->
                                        <div class="platform-labels">
                                            @if ((int)game.Platform == 1)
                                            {
                                                <div class="platform-label bg-white text-dark">PS5</div>
                                            }
                                            else if (game.Platform == 0)
                                            {
                                                <div class="platform-label bg-dark text-light">PS4</div>
                                            }
                                            else if ((int)game.Platform == 2)
                                            {
                                                <div class="platform-label bg-white text-dark">PS5</div>
                                                <div class="platform-label bg-dark text-light">PS4</div>
                                            }
                                        </div>

                                        <!-- Game Info -->
                                        <div class="game-info">
                                            <div class="game-title">@game.Title</div>

                                            <!-- Display discounted price if applicable -->
                                            <div class="game-price">
                                                @if (game.SalePrice.HasValue)
                                                {
                                                    <span class="original-price text-decoration-line-through">$@game.Price</span>
                                                    <span class="discount-price">$@game.SalePrice</span>
                                                }
                                                else
                                                {
                                                    <span class="regular-price">$@game.Price</span>
                                                }
                                            </div>
                                        </div>
                                    </a>

                                    <!-- Add to Basket Button -->
                                    <button class="add-to-cart-btn" gameId="@game.Id">Add to Cart</button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No games found based on the selected filters.</p>
                    }
                </div>
            </div>
        </div>

@*                 <div class="pagination-controls d-flex justify-content-center mt-4">
                    <!-- Previous Button -->
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <a href="javascript:void(0);" class="btn btn-secondary me-2 pagination-link" data-page-number="@(@ViewBag.CurrentPage - 1)">
                            &laquo;
                        </a>
                    }

                    <!-- Page Numbers -->
                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                        if (i == ViewBag.CurrentPage)
                        {
                            <span class="btn btn-primary me-2 pagination-link" data-page-number="@i">@i</span>
                        }
                        else
                        {
                            <a href="javascript:void(0);" class="btn btn-secondary me-2 pagination-link" data-page-number="@i">@i</a>
                        }
                    }

                    <!-- Next Button -->
                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <a href="javascript:void(0);" class="btn btn-secondary pagination-link" data-page-number="@(@ViewBag.CurrentPage + 1)">
                            &raquo;
                        </a>
                    }
                </div>
 *@            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>


        $(document).ready(function () {
            // Function to handle pagination click event
            $(document).on('click', '.pagination-link', function (e) {
                e.preventDefault();
                var pageNumber = $(this).data('page-number');

                // Call AJAX to fetch the new data
                $.ajax({
                    url: '/Game/Index',  // Update to your MVC action
                    type: 'GET',
                    data: {
                        pageNumber: pageNumber,
                        pageSize: 10, // Adjust page size as needed
                    },
                    success: function (response) {
                        // Replace the games list with the new data
                        $('.game-list-container').html($(response).find('.game-list-container').html());

                        // Replace pagination controls with the new data
                        $('.pagination-controls').html($(response).find('.pagination-controls').html());
                    },
                    error: function (xhr, status, error) {
                        console.log("Error loading page: " + error);
                    }
                });
            });
        });

        function getJwtTokenFromCookie() {
            const cookieString = document.cookie;
            const cookies = cookieString.split('; ');
            const tokenCookie = cookies.find(row => row.startsWith('token='));
            return tokenCookie ? tokenCookie.split('=')[1] : null;
        }


        // Function to decode JWT token and extract the payload
        function decodeJwtToken(token) {
            if (!token) return null;
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            return JSON.parse(jsonPayload);
        }

        // Function to get URL parameters
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            const results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        }

        // Set filter values based on URL parameters
        function setFilterValues() {
            const category = getUrlParameter('category');
            const platform = getUrlParameter('platform');
            const sortByPrice = getUrlParameter('sortByPrice');
            const sortByDate = getUrlParameter('sortByDate');

            if (category) {
                document.getElementById('filterCategory').value = category;
            }
            if (platform) {
                document.getElementById('filterPlatform').value = platform;
            }
            if (sortByPrice) {
                document.getElementById('sortByPrice').value = sortByPrice;
            }
            if (sortByDate) {
                document.getElementById('sortByDate').value = sortByDate;
            }
        }

        // Reset Filters by clearing URL parameters and reloading the page
        document.getElementById('resetFilters').addEventListener('click', function () {
            window.location.href = '@Url.Action("Index", "Game")';
        });

        // Call setFilterValues when the page loads
        window.onload = function () {
            setFilterValues();
        };


        $(document).on("click", ".add-to-cart-btn", function () {
            console.log("ggg");

            const token = getJwtTokenFromCookie();
            console.log(token);
            if (!token) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please log in',
                    text: 'You need to log in to add games to the basket.',
                });
                return;
            }

            const gameId = $(this).attr("gameId");

            // Send the AJAX request to add the game to the basket
            $.ajax({
                url: `/Basket/AddToBasket?userId=null&gameId=${gameId}&quantity=1`,  // Assuming you have this action in BasketController
                type: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`  // Include the JWT token in the request headers
                },
                contentType: 'application/json',
                success: function (response) {
                    Swal.fire({
                        position: 'center',
                        icon: 'success',
                        title: 'Game added to basket!',
                        showConfirmButton: false,
                        timer: 1500
                    });
                },
                error: function (xhr, status, error) {
                    console.log('Error:', xhr.responseText || error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to add game to basket',
                        text: 'There was an error adding the game to your basket. Please try again.',
                    });
                }
            });
        });

        $(document).on("click", ".favorite-btn", function () {
            const gameId = $(this).data("game-id");
            const isInWishlist = $(this).data("in-wishlist");
            const token = getJwtTokenFromCookie();

            if (!token) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please log in',
                    text: 'You need to log in to manage your wishlist.',
                });
                return;
            }

            if (isInWishlist === false) {
                // Add to wishlist
                $.ajax({
                    url: `/Game/AddToWishlist?gameId=${gameId}`,
                    type: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    contentType: 'application/json',
                    success: function (response) {
                        Swal.fire({
                            position: 'center',
                            icon: 'success',
                            title: 'Game added to wishlist!',
                            showConfirmButton: false,
                            timer: 1500
                        });

                        // Update the UI
                        $(`[data-game-id='${gameId}']`).data("in-wishlist", true);
                        $(`[data-game-id='${gameId}'] i`).addClass("wishlist-added");
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to add to wishlist',
                            text: 'There was an error. Please try again.',
                        });
                    }
                });
            } else {
                // Remove from wishlist
                $.ajax({
                    url: `/Game/RemoveFromWishlist?gameId=${gameId}`,
                    type: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    contentType: 'application/json',
                    success: function (response) {
                        Swal.fire({
                            position: 'center',
                            icon: 'success',
                            title: 'Game removed from wishlist!',
                            showConfirmButton: false,
                            timer: 1500
                        });

                        // Update the UI
                        $(`[data-game-id='${gameId}']`).data("in-wishlist", false);
                        $(`[data-game-id='${gameId}'] i`).removeClass("wishlist-added");
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to remove from wishlist',
                            text: 'There was an error. Please try again.',
                        });
                    }
                });
            }
        });

        $(document).ready(function () {
            const token = getJwtTokenFromCookie();
            if (token) {
                $.ajax({
                    url: '/api/Wishlist/{userId}', // Replace with actual API endpoint
                    type: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    success: function (response) {
                        const wishlistGames = response.Data.WishlistGames;

                        wishlistGames.forEach(function (game) {
                            $(`[data-game-id='${game.Id}']`).data("in-wishlist", true);
                            $(`[data-game-id='${game.Id}'] i`).addClass("wishlist-added");
                        });
                    },
                    error: function () {
                        console.log('Failed to load wishlist');
                    }
                });
            }
        });


        // Other existing functions like setFilterValues, etc.
        window.onload = function () {
            setFilterValues();
        };
    </script>
}
