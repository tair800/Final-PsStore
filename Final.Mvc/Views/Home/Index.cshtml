@model List<GameListItemVM>

@section Links {
    <link href="~/css/home.css" rel="stylesheet" />
}

<!-- Promotional Section -->
<section class="promo-section">
    <img id="promoImage" src="./img/1721388324-8953.avif" width="100%" height="auto" alt="">
</section>


<!-- Squares Section -->
<div class="container">
    <div class="image-row">
        <div class="image-square">
            <img src="./img/gta.jpg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/vrising.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
    </div>
</div>


<div class="game-list">
    <h1> All Deals</h1>
    @await Component.InvokeAsync("Game")

</div>




<div class="container mt-4">
    <div class="row g-3">
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5 class="bg-white text-dark w-50 rounded-2">PS5</h5>
                <h3>Games</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5 class="bg-white text-dark w-50 rounded-2">PS4</h5>
                <h3>Games</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-tags"></i></h5>
                <h3>All Deals</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-puzzle-piece"></i></h5>
                <h3>DLC</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-regular fa-handshake"></i></h5>
                <h3>Free to Play</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-vr-cardboard"></i></h5>
                <h3>VR</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-square-plus"></i></h5>
                <h3>PS Plus</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="bi bi-vr"></i></h5>
                <h3>PS VR2</h3>
            </div>
        </div>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>


    let searchTimeout = null;

// Debounce function to limit the frequency of search API calls
function debouncedSearch() {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(performSearch, 300);  // 300ms debounce delay
}

function performSearch() {
    const query = document.getElementById("searchInput").value.trim();
    
    // Check if query is too short, and clear results if it is
    if (query.length < 2) {
        document.getElementById("searchResults").innerHTML = '<p>Please enter at least 2 characters.</p>';
        return;
    }

    // Fetch search results from the API
    fetch(`/Game/Search?title=${encodeURIComponent(query)}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        displaySearchResults(data);
    })
    .catch(error => {
        console.error('There was a problem with the search:', error);
        document.getElementById("searchResults").innerHTML = '<p>Error fetching search results. Please try again.</p>';
    });
}

function displaySearchResults(results) {
    const resultsContainer = document.getElementById("searchResults");
    resultsContainer.innerHTML = '';

    if (results.length > 0) {
        results.forEach(game => {
            const resultItem = document.createElement("div");
            resultItem.classList.add("list-group-item", "list-group-item-action");
            resultItem.innerHTML = `
                <a href="/Game/Detail/${game.id}">
                    <img src="${game.imgUrl}" alt="${game.title}" style="width: 50px; height: 50px; margin-right: 10px;">
                    ${game.title} - $${game.price}
                </a>`;
            resultsContainer.appendChild(resultItem);
        });
    } else {
        resultsContainer.innerHTML = '<p>No games found.</p>';
    }
}

    $(document).ready(function () {
        console.log('Initializing Slick Carousel...');
        $('.autoplay').slick({
            slidesToShow: 4,
            slidesToScroll: 1,
            autoplay: true,
            autoplaySpeed: 2000,
            infinite: false,
            rtl: false,
            arrows: true,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 4
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 3
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 2
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 1
                    }
                }
            ]
        });
    });
            // Change direction after scrolling through all slides
        $('.autoplay').on('afterChange', function(event, slick, currentSlide){
            if(currentSlide === slick.slideCount - slick.options.slidesToShow){
                // When at the last set of slides, reverse direction to scroll left
                slick.slickSetOption('rtl', true, true);  // Scroll right-to-left
            } else if (currentSlide === 0) {
                // When back at the first slide, set it back to normal
                slick.slickSetOption('rtl', false, true);  // Scroll left-to-right
            }
        });
</script>

