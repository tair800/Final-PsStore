@model List<GameListItemVM>

@section Links {
    <link href="~/css/home.css" rel="stylesheet" />
}

<!-- Promotional Section -->
<section class="promo-section">
    <img id="promoImage" width="100%" height="auto" alt="Promo Image"> <!-- No default src -->
</section>



<!-- Squares Section -->
<div class="container">
    <div class="image-row">
        <div class="image-square">
            <img src="./img/gta.jpg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/vrising.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
        <div class="image-square">
            <img src="img/rainbow.jpeg" alt="Astro Bot" class="square-img">
        </div>
    </div>
</div>


<div class="game-list">
    <h1> All Deals</h1>
    @await Component.InvokeAsync("Game")

</div>




<div class="container mt-4">
    <div class="row g-3">
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5 class="bg-white text-dark w-50 rounded-2">PS5</h5>
                <h3>Games</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5 class="bg-white text-dark w-50 rounded-2">PS4</h5>
                <h3>Games</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-tags"></i></h5>
                <h3>All Deals</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-puzzle-piece"></i></h5>
                <h3>DLC</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-regular fa-handshake"></i></h5>
                <h3>Free to Play</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-vr-cardboard"></i></h5>
                <h3>VR</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="fa-solid fa-square-plus"></i></h5>
                <h3>PS Plus</h3>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="category-card">
                <h5><i class="bi bi-vr"></i></h5>
                <h3>PS VR2</h3>
            </div>
        </div>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>


// Simple debounce function to limit API calls while typing
function debounce(func, delay) {
    let timer;
    return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => func.apply(this, args), delay);
    };
}

// Debounced search function
const debouncedSearch = debounce(function () {
    const query = document.getElementById('searchInput').value;

    if (query.length < 1) {
        document.getElementById('searchResults').innerHTML = '<div class="text-center text-muted">Type for searching...</div>';
        return;
    }

    // Perform AJAX request to fetch the search results
    fetch(`/Game/Search?title=${query}`)
        .then(response => response.text()) // Expecting partial view HTML as response
        .then(data => {
            document.getElementById('searchResults').innerHTML = data; // Inject the partial view result
        })
        .catch(() => {
            document.getElementById('searchResults').innerHTML = '<div class="text-center text-danger">Error while searching. Try again later.</div>';
        });
}, 300);

    $(document).ready(function () {
        console.log('Initializing Slick Carousel...');
        $('.autoplay').slick({
            slidesToShow: 4,
            slidesToScroll: 1,
            autoplay: true,
            autoplaySpeed: 2000,
            infinite: true,
            rtl: false,
            arrows: true,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 4
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 3
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 2
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 1
                    }
                }
            ]
        });
    });

        const promoImage = document.getElementById("promoImage");

    // Get all images in the squares section
    const squareImages = document.querySelectorAll(".square-img");

    // Add click event to all square images
    squareImages.forEach(img => {
        img.addEventListener("click", function () {
            // Change the promo image's src to the clicked image's src
            promoImage.src = this.src;
        });
    });

 
     if (squareImages.length > 0) {
        promoImage.src = squareImages[0].src;  // Set the first image as the default promo image
    }

    // Add click event to all square images to change the promo image when clicked
    squareImages.forEach(img => {
        img.addEventListener("click", function () {
            // Change the promo image's src to the clicked image's src
            promoImage.src = this.src;
        });
    });

    //basket
    function isUserLoggedIn() {
        const userEmail = getCookie("userEmail");
        const token = getCookie("token");
        return userEmail && token;
    }

    // Function to get cookie by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Load the basket content when the modal is opened
    document.getElementById('basketModal').addEventListener('show.bs.modal', function () {
        const basketContent = document.getElementById('basketContent');
        if (isUserLoggedIn()) {
            // If user is logged in, load the basket content via API call
            fetch('/Basket/GetBasket')
                .then(response => response.text())
                .then(data => {
                    basketContent.innerHTML = data;
                })
                .catch(error => {
                    basketContent.innerHTML = `<div class="alert alert-danger">Failed to load basket. Please try again later.</div>`;
                });
        } else {
            // If user is not logged in, display a message and a login button
            basketContent.innerHTML = `
                    <div class="alert alert-warning text-center">
                        <p>You are not logged in. Please log in to view your basket.</p>
                        <a href="/User/Login" class="btn btn-primary">Go to Login</a>
                    </div>
                `;
        }
    });

</script>

